import{U,B as h,y as d,z as n,V as C,Q as w,W as E,Y as $,T as y,x as A,b as D,Z as v,$ as x,a0 as S}from"./index-BgfU13Nz.js";const F=()=>{const e=new Map,r=new Map,s=5*60*1e3;return{get:o=>r.has(o)&&Date.now()>r.get(o)?(e.delete(o),r.delete(o),null):e.get(o)||null,set:(o,a)=>{e.set(o,a),r.set(o,Date.now()+s)},delete:o=>{e.delete(o),r.delete(o)},clear:()=>{e.clear(),r.clear()}}},f=F(),l=F(),R={async getUserData(e){if(!e)return console.warn("getUserData called with no UID"),null;try{const r=f.get(e);if(r)return console.log("Returning cached user data for:",e),r;console.log("Fetching user data from Firestore for:",e);const s=await h(d(n,"users",e));if(s.exists()){const o=s.data();return console.log("User data found:",o),f.set(e,o),o}else return console.log("No user document found for:",e),null}catch(r){throw console.error("Error fetching user data:",r),new Error(`Failed to fetch user data: ${r.message}`)}},async updateProfile(e,r){if(!e)throw new Error("User ID is required");try{const s={...r,lastModified:new Date};await A(d(n,"users",e),s,{merge:!0}),f.delete(e),r.email&&D.currentUser&&await S(D.currentUser,r.email),console.log("User profile updated successfully:",e)}catch(s){throw console.error("Error updating user profile:",s),new Error(`Failed to update profile: ${s.message}`)}},async getUsers(e=""){try{console.log("Starting to fetch all users...");const r=`all_users_${e}`,s=f.get(r);if(s)return console.log("Returning cached users list, count:",s.length),s;const o=w(n,"users");let a;try{a=E(o,x("name","asc"))}catch(c){console.warn("Could not order by name, falling back to basic query:",c),a=o}console.log("Executing Firestore query for users...");const u=await y(a);if(console.log("Firestore query completed. Document count:",u.size),u.empty)return console.warn("No users found in Firestore collection"),[];const m=[];let i=0;u.forEach(c=>{try{const t=c.data(),p={id:c.id,uid:t.uid||c.id,name:t.name||"Unknown User",email:t.email||"No Email",createdAt:t.createdAt,lastModified:t.lastModified,...t};m.push(p),console.log("Processed user:",p.id,p.name,p.email)}catch(t){console.error("Error processing user document:",c.id,t),i++}}),console.log(`Successfully processed ${m.length} users, ${i} errors`);let g=m;if(e&&e.trim()){const c=e.toLowerCase().trim();g=m.filter(t=>t.name&&t.name.toLowerCase().includes(c)||t.email&&t.email.toLowerCase().includes(c)),console.log(`Search filtered to ${g.length} users`)}return f.set(r,g),g}catch(r){throw console.error("Error in getUsers:",r),r.code==="permission-denied"?new Error("Permission denied: Check Firestore security rules for users collection"):r.code==="unavailable"?new Error("Firestore service unavailable: Check your internet connection"):r.code==="not-found"?new Error("Users collection not found: Check your Firestore database setup"):new Error(`Failed to fetch users: ${r.message}`)}},async testConnection(){try{console.log("Testing Firestore connection...");const e=w(n,"users"),r=E(e,v(1)),s=await y(r);if(console.log("Firestore connection test successful"),console.log("Sample document count:",s.size),s.size>0){const o=s.docs[0];console.log("Sample document ID:",o.id),console.log("Sample document data:",o.data())}return{success:!0,documentCount:s.size,message:"Firestore connection successful"}}catch(e){return console.error("Firestore connection test failed:",e),{success:!1,error:e.message,code:e.code}}},async getUsersCount(){try{const e=w(n,"users");return(await y(e)).size}catch(e){throw console.error("Error getting users count:",e),new Error(`Failed to get users count: ${e.message}`)}}},q={async isAdmin(e){if(!e)return console.warn("isAdmin called with no UID"),!1;try{const r=l.get(e);if(r!==null)return console.log(`Admin status from cache for ${e}: ${r}`),r;console.log("Checking admin status in Firestore for:",e);const o=(await h(d(n,"admins",e))).exists();return l.set(e,o),console.log(`Admin check for ${e}: ${o}`),o}catch(r){console.error("Error checking admin status:",r);const s=l.get(e);return s!==null?s:!1}},async getAdmins(){try{console.log("Fetching all admins...");const e=w(n,"admins"),r=await y(e);console.log("Admins found:",r.size);const s=r.docs.map(o=>({id:o.id,...o.data()}));return console.log("Processed admins:",s),s}catch(e){throw console.error("Error fetching admins:",e),new Error("Failed to fetch admin list: "+e.message)}},async addAdmin(e){var s;if(!e||!e.trim())throw new Error("Email is required");const r=e.trim().toLowerCase();console.log("Adding admin for email:",r);try{const o=w(n,"users"),a=E(o,$("email","==",r)),u=await y(a);if(u.empty)throw new Error("User not found with this email address");const i=u.docs[0].id;if(console.log("Found user ID:",i),(await h(d(n,"admins",i))).exists())throw new Error("User is already an admin");return await A(d(n,"admins",i),{email:r,addedAt:new Date,addedBy:(s=D.currentUser)==null?void 0:s.uid}),l.delete(i),l.delete("all_admins"),console.log("Admin added successfully:",i),!0}catch(o){throw console.error("Error adding admin:",o),o}},async removeAdmin(e){if(!e)throw new Error("Admin ID is required");try{if(console.log("Removing admin:",e),!(await h(d(n,"admins",e))).exists())throw new Error("Admin not found");return await C(d(n,"admins",e)),l.delete(e),l.delete("all_admins"),console.log("Admin removed successfully:",e),!0}catch(r){throw console.error("Error removing admin:",r),r}},clearAdminCache(){l.clear()}},z=e=>U(D,async r=>{if(r)try{console.log("Auth state changed - user logged in:",r.uid);const s=await h(d(n,"users",r.uid)),o=s.exists()?s.data():null;o||console.warn("User authenticated but no Firestore document found");const a=await q.isAdmin(r.uid);e({user:r,userData:o,isAdmin:a,loading:!1})}catch(s){console.error("Error in auth observer:",s),e({user:r,userData:null,isAdmin:!1,loading:!1,error:s.message})}else console.log("Auth state changed - user logged out"),e({user:null,userData:null,isAdmin:!1,loading:!1})});export{q as a,z as i,R as u};
