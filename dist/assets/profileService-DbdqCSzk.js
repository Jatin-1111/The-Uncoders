import{b as h,x as l,y as o,z as n,B as d,C as u}from"./index-BgfU13Nz.js";class p{constructor(e){this.capacity=e,this.cache=new Map}get(e){if(!this.cache.has(e))return null;const t=this.cache.get(e);return this.cache.delete(e),this.cache.set(e,t),t}put(e,t){this.cache.has(e)?this.cache.delete(e):this.cache.size>=this.capacity&&this.cache.delete(this.cache.keys().next().value),this.cache.set(e,t)}remove(e){this.cache.delete(e)}clear(){this.cache.clear()}}const a=new p(100),f=(c,e)=>{let t;return(...s)=>{clearTimeout(t),t=setTimeout(()=>c(...s),e)}};class g{constructor(){this.pendingUpdates=new Map,this.processPendingUpdates=f(this._processPendingUpdates.bind(this),2e3)}async initializeProfile(e,t){const s=h.currentUser;if(!s)throw new Error("No authenticated user");const r=this._sanitizeName(e);this._validateName(r);const i={uid:s.uid,name:r,email:t,createdAt:new Date,lastModified:new Date};return await l(o(n,"users",s.uid),i),a.put(s.uid,{...i,lastFetched:Date.now()}),i}async getUserProfile(e){if(!e)throw new Error("User ID is required");console.log("Fetching profile for uid:",e);const t=a.get(e);if(t&&!this._isProfileStale(t))return console.log("Returning cached profile:",t),t;try{const s=await d(o(n,"users",e));if(console.log("Firestore response:",s.data()),!s.exists())return console.log("No document exists for uid:",e),null;const r={...s.data(),lastFetched:Date.now()};return a.put(e,r),r}catch(s){return console.error("Error fetching user profile:",s),t||null}}async updateName(e){const t=h.currentUser;if(!t)throw new Error("No authenticated user");const s=this._sanitizeName(e);this._validateName(s);const i={...a.get(t.uid)||{},name:s,lastModified:new Date};return a.put(t.uid,i),this.pendingUpdates.set(t.uid,{...this.pendingUpdates.get(t.uid),name:s}),this.processPendingUpdates(),s}async _processPendingUpdates(){if(this.pendingUpdates.size===0)return;const e=new Map(this.pendingUpdates);this.pendingUpdates.clear();const t=[];for(const[s,r]of e)t.push(u(o(n,"users",s),{...r,lastModified:new Date}));try{await Promise.all(t)}catch(s){console.error("Error processing profile updates:",s);for(const[r]of e)a.remove(r);throw s}}_sanitizeName(e){return e.trim().replace(/\s+/g," ").slice(0,50)}_validateName(e){if(e.length<2)throw new Error("Name must be at least 2 characters long");if(!/^[a-zA-Z\s-']+$/.test(e))throw new Error("Name contains invalid characters")}_isProfileStale(e){return Date.now()-e.lastFetched>3e5}clearCache(){a.clear()}}const m=new g;export{m as p};
